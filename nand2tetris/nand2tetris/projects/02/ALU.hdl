// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    //0:Operation 0

    //1:Operation 1
    
    //2:Operation -1

    //3:Operation x       => Or16
    Or16(a=1,b=x,out= s3);

    //4:Operation y       => Or16
    Or16(a=1,b=y,out= s4);
    
    //5:Operation !x      => Not16
    Not16(in=x, out= s5);

    //6:Operation !y      => Not16
    Not16(in=y, out = s6);

    //7:Operation -x      => Neg16(x)
    Neg16(in=x,out=s7);

    //8:Operation -y      => Neg16(y)
    Neg16(in=y, out=s8);

    //9:Operation x+1     => Inc16
    Inc16(in=x, out = s9);

    //10:Operation y+1     => Inc16
    Inc16(in=y,out=s10);

    //11:Operation x-1     => Add16(X, Neg16(1))
    Dec16(in=x,out=s11);

    //12:Operation y-1     => Add16(Y, Neg16(1))
    Dec16(in=y, out= s12);

    //13:Operation x+y     => Add16(X,Y)
    Add16(a=x,b=y, out= s13);
    
    //14:Operatoin x-y     => Add16(X, Neg16(y))
    Neg16(in= y, out= negy);
    Add16(a= x, b = negy, out=s14);

    //15:Operation y-x     => Add16(y,Neg16(x))
    Neg16(in= x, out= negx);
    Add16(a= y, b = negx, out=s15);
    
    //16:Operation x&Y     => And16(X,Y)
    And16(a=x,b=y,out= s17)
    
    //17:Operation x|Y     => Or16(x,y)
    Or16(a=x,b=y,out=s18)
}